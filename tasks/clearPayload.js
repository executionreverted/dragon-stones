

const CHAIN_ID = require("../constants/chainIds.json")
const layerzeroEndpoints = require("../constants/layerzeroEndpoints.json")
let tx
module.exports = async function (taskArgs, hre) {
    let endpoint = await ethers.getContractAt("ILayerZeroEndpoint", layerzeroEndpoints[hre.network.name])
    let contract = await ethers.getContract("Omnimons")
    // let iface = await contract.interface;
    // let receipt = await contract.provider.getTransactionReceipt("0xf05d7b4830f338e0ea1a30c6b16c74abd0904182a2acdb6769bdb44e5d5d3648")

    // let parsedEvent = iface.parseLog(receipt.logs[1]);
    // console.log(parsedEvent);
    // // trustedRemote is the remote + local format
    // let trustedRemote = hre.ethers.utils.solidityPack(
    //     ['address', 'address'],
    //     ["0xFB32bF8cb6eCa3D51c459c9Fa410b6103D4dF051", contract.address]
    // )

    // function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload)
    // const storedCredit = await contract.storedCredits("0x3d01d394ab1fbb726821b21e622ae366d4219e6b5ea82c038f897de81d7c48f8")
    // const payload_ = ethers.utils.AbiCoder.prototype.encode(
    //     ['uint16', 'address', 'uint256', 'bool'],
    //     [storedCredit.srcChainId, storedCredit.toAddress, storedCredit.index, storedCredit.creditsRemain]
    // );
    // const keccak = ethers.utils.keccak256(payload_); // const keccak2 = ethers.utils.keccak256(payload);
    // console.log({
    //     keccak2
    // });
    tx = await endpoint.retryPayload(10106, "0xFD901137428CE91A255D16A2B0A087E86325291D0025F6C9EFB9C2FC2EE75D77A9072F5CAA7F97DE", "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000000E000000000000000000000000000000000000000000000000000000000000000146B6549C23E3591449BFA43C398D275610523764400000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    // if (keccak2 !== hash) return;
    // tx = await contract.clearCredits(
    //     parsedEvent.args["_payload"],
    //     {
    //         gasLimit: 1500000
    //     }
    // )
    await tx.wait(1)
}
